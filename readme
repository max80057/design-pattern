大話設計心得
-------------------------------
1.類別盡可能只針對單一需要，已避免強耦合的出現
2.模式的使用，要注意評估情況，不然只會白白增加程式複雜度，慎用


1_easy_factory(簡單工廠)
優點:針對變動不大的案件極為快速有效
缺點:若有需要新增模式修改邏輯，原本的可能會壞。

2_Strategy(策略模式)
乍看之下跟簡單工廠一樣，內容稍有不同。以罐裝飲料來說
簡單工廠就是，工廠給你飲料罐，至於你要裝啥還是拿去踢都自己來，工廠不管。
策略模式就是，自動販賣機，你投幣按什麼飲料，就給你啥，至於怎麼出來的你不用知道。

3_SRP(單一職責原則)
盡可能將不同邏輯的東西拆成不同類別，以避免修改時會去動到不相關的東西，費工又有風險

4_OCP(開放-封閉原則)
盡可能在新需求產生時(或是早已知道的需求)，應對將來的可能，去建立抽象類別重構程式，
以利未來修改方式為新增程式，而不是修改舊有內容。
PS:如果不早期修改，以後會改到想死

5_依賴倒轉原則
高階模組不應該依賴低階模組(被呼叫者)，兩個都應該依賴抽象。
抽象不應該依賴細節，細節應該依賴抽象。

簡單來說就是針對抽象類別進行設計，舉例來說
一個自動手搖杯機跟一個自動販賣機，流程都是投幣=>給消費者選擇=>推出貨物到取物口，這段就可以寫在抽象類別上，
兩者詳細實現則分別為:
自動販賣機:推出選擇的飲料到取物口
自動手搖杯機:加料到杯子內=>注入飲料=>封口=>搖晃=>推出飲料到取物口

6_Decorator(裝飾模式)
看起來很複雜，甚至多此一舉，其中原因則是為了盡可能符合前面3項原則，用來減少程式複雜度。
第一拆分成主功能，即不會修改到的部分。第二則是拆分成其他要執行的功能，這樣就可以在不修改主功能的情況，靈活增加另外的功能

7_Proxy(代理模式)
跟裝飾模式很像，功能也類似。
代理模式更像在主功能前後加點不影響主功能的東西。
裝飾模式則是在主功能前後動態的增加一些功能，若不影響主功能的話就跟代理模式幾乎一樣。

8_

9_Prototype(原型模式)
平常重複用同物件的複製版，可以另外複製一個相同設定的物件來使用，若結構式複雜或是設定複雜，可用這方法節省時間跟效能。
code寫的是淺複製，都會指向相同的對象，使用要注意
1.若無重新設定，則會使用原物件的設定值
2.若原物件設定更動，則所有複製物件皆會改變
深複製

10_

